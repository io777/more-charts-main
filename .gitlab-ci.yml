stages:
    - dev
    - build
    - deploy

variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_HOST: tcp://docker:2376
    DOCKER_CERT_PATH: "/certs/client"
    DOCKER_TLS_VERIFY: 1
    REGISTRY: ${CI_REGISTRY}/babadook777/more-charts-main
    IMAGE_TAG: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}

dev:
    stage: dev
    only:
        - branches
    image: docker/compose:latest
    services:
        - docker:dind
    before_script:
        - apk add --no-cache make
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    cache:
        key: ${CI_COMMIT_REF_SLUG}
        paths:
            - frontend/node_modules/
            - cucumber/node_modules/
    script:
        - make init
        - make push-dev-cache

        - make api-black-check
        - make api-flake8
        - make api-isort

        - make frontend-lintfix
        - make cucumber-lint-fix

        - make api-test
        - make frontend-test
    tags:
        - runner_1
    artifacts:
        paths:
            - api/var/log

build:
    stage: build
    only:
        - branches
    image: docker/compose:latest
    services:
        - docker:dind
    before_script:
        - apk add --no-cache make
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
        - make build
        - make push-build-cache

        - make testing-build
        - make push-testing-build-cache

        - make testing-init
        - make testing-smoke
        - make testing-e2e

        - if [ "${CI_COMMIT_REF_SLUG}" == "main" ]; then make push; fi
    tags:
        - runner_1
    artifacts:
        paths:
            - cucumber/var

deploy:
    stage: deploy
    only:
        - main
    image: alpine:latest
    before_script:
        - apk add --no-cache make openssh-client
        - eval $(ssh-agent -s)
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - echo "${PRODUCTION_KEY}" | tr -d '\r' | ssh-add -
        - ssh-keyscan -H ${PRODUCTION_HOST} >> ~/.ssh/known_hosts
    script:
        - make deploy
    tags:
        - runner_1
    variables:
        BUILD_NUMBER: ${CI_PIPELINE_ID}
        HOST: ${PRODUCTION_HOST}
        PORT: ${PRODUCTION_PORT}
        SQL_USER: ${SQL_USER}
        SQL_PORT: ${SQL_PORT}
        SQL_PASSWORD: ${SQL_PASSWORD}
        SQL_HOST: ${SQL_HOST}
        SQL_ENGINE: ${SQL_ENGINE}
        SQL_DATABASE: ${SQL_DATABASE}
        FLOWER_USER: ${FLOWER_USER}
        FLOWER_PASSWORD: ${FLOWER_PASSWORD}
        EMAIL_USE_SSL: ${EMAIL_USE_SSL}
        EMAIL_PORT: ${EMAIL_PORT}
        EMAIL_HOST_USER: ${EMAIL_HOST_USER}
        EMAIL_HOST: ${EMAIL_HOST}
        DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
        DJANGO_PUBG_API3: ${DJANGO_PUBG_API3}
        DJANGO_PUBG_API2: ${DJANGO_PUBG_API2}
        DJANGO_PUBG_API1: ${DJANGO_PUBG_API1}
        DJANGO_DEBUG: ${DJANGO_DEBUG}
        DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
        CELERY_SECRET_KEY: ${CELERY_SECRET_KEY}
        CELERY_DEBUG: ${CELERY_DEBUG}
        CELERY_BROKER: ${CELERY_BROKER}
        CELERY_ALLOWED_HOSTS: ${CELERY_ALLOWED_HOSTS}