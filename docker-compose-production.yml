version: "3.8"
services:
    traefik:
        image: traefik:2.4
        command:
            --providers.docker=true
            --providers.docker.watch=true
            --providers.docker.exposedByDefault=false
            --entryPoints.http.address=:80
            --entryPoints.https.address=:443
            --certificatesresolvers.letsEncrypt.acme.httpChallenge=true
            --certificatesresolvers.letsEncrypt.acme.httpChallenge.entryPoint=http
            --certificatesresolvers.letsEncrypt.acme.email=babadook777@gmail.com
            --certificatesresolvers.letsEncrypt.acme.storage=/certs/acme.json
        labels:    
            - traefik.enable=true
            - traefik.docker.network=traefik-public
            - traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)
            - traefik.http.routers.http-catchall.entryPoints=http
            - traefik.http.routers.http-catchall.middlewares=redirect-to-https
            - traefik.http.services.http-catchall.loadBalancer.server.port=80
            - traefik.http.middlewares.redirect-to-https.redirectScheme.scheme=https
            - traefik.http.middlewares.redirect-to-https.redirectScheme.permanent=true
            # - traefik.http.middlewares.secure-headers.headers.sslRedirect=true
            # - traefik.http.middlewares.secure-headers.headers.stsSeconds=31536000
            # - traefik.http.middlewares.secure-headers.headers.contentSecurityPolicy=block-all-mixed-content
        ports:
            # - target: 80
            #   published: 80
            #   protocol: tcp
            #   mode: host
            # - target: 443
            #   published: 443
            #   protocol: tcp
            #   mode: host
            - 80:80
            - 443:443
        networks:
            - traefik-public
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - /root/traefik-public-certs:/certs
    
    frontend:
        image: ${REGISTRY}/more-charts-frontend:${IMAGE_TAG}
        networks:
            - traefik-public
            - default
        labels:
            - traefik.enable=true
            - traefik.docker.network=traefik-public
            - traefik.http.routers.frontend.rule=Host(`more-charts.ru`) || Host(`www.more-charts.ru`)
            - traefik.http.services.frontend.loadBalancer.server.port=80
            - traefik.http.middlewares.frontend-redirect.redirectRegex.regex=^(https?://)www.more-charts.ru/(.*)$$
            - traefik.http.middlewares.frontend-redirect.redirectRegex.replacement=$${1}more-charts.ru/$${2}
            - traefik.http.middlewares.frontend-redirect.redirectRegex.permanent=true
            # - traefik.http.routers.frontend.middlewares=frontend-redirect,secure-headers
            - traefik.http.routers.frontend.middlewares=frontend-redirect
            - traefik.http.routers.frontend.entryPoints=https
            - traefik.http.routers.frontend.tls=true
            - traefik.http.routers.frontend.tls.certResolver=letsEncrypt
        depends_on:
            - frontend-node
    
    frontend-node:
        image: ${REGISTRY}/more-charts-frontend-node:${IMAGE_TAG}
        depends_on:
            - api-src    

    api:
        image: ${REGISTRY}/more-charts-api:${IMAGE_TAG}
        networks:
            - traefik-public
            - default
        labels:
            - traefik.enable=true
            - traefik.docker.network=traefik-public
            - traefik.http.routers.api.rule=Host(`api.more-charts.ru`)
            - traefik.http.services.api.loadBalancer.server.port=80
            # - traefik.http.routers.api.middlewares=secure-headers
            - traefik.http.routers.api.entryPoints=https
            - traefik.http.routers.api.tls=true
            - traefik.http.routers.api.tls.certResolver=letsEncrypt      
        depends_on:
            - api-src
        volumes:
            - /root/main/api/static:/app/static
            - /root/main/api/media:/app/media
    
    api-src:
        image: ${REGISTRY}/more-charts-api-src:${IMAGE_TAG}
        environment:
            SQL_ENGINE: /run/secrets/sql_engine
            SQL_DATABASE: /run/secrets/sql_database
            SQL_USER: /run/secrets/sql_user
            SQL_HOST: /run/secrets/sql_host
            SQL_PASSWORD: /run/secrets/sql_password
            SQL_PORT: /run/secrets/sql_port
            EMAIL_HOST: /run/secrets/email_host
            EMAIL_PORT: /run/secrets/email_port
            EMAIL_HOST_USER: /run/secrets/email_host_user
            EMAIL_USE_SSL: /run/secrets/email_use_ssl
            DEBUG: /run/secrets/django_debug
            ALLOWED_HOSTS: /run/secrets/django_allowed_hosts
            SECRET_KEY: /run/secrets/django_secret_key
            PUBG_API1: /run/secrets/django_pubg_api1
            PUBG_API2: /run/secrets/django_pubg_api2
            PUBG_API3: /run/secrets/django_pubg_api3
        volumes:
            - /root/main/api/static:/home/app/web/static
            - /root/main/api/media:/home/app/web/media
        depends_on:
            - postgres
        secrets:
            - sql_engine
            - sql_database
            - sql_user
            - sql_host
            - sql_password
            - sql_port
            - email_host
            - email_port
            - email_host_user
            - email_use_ssl
            - django_debug
            - django_allowed_hosts
            - django_secret_key
            - django_pubg_api1
            - django_pubg_api2
            - django_pubg_api3

    postgres:
        image: postgres:alpine
        volumes:
            - /root/db/db-dump:/dump
            - /root/db/db-data:/var/lib/postgresql/data
        environment:
            POSTGRES_USER_FILE: /run/secrets/sql_user
            POSTGRES_PASSWORD_FILE: /run/secrets/sql_password
            POSTGRES_DB_FILE: /run/secrets/sql_database
        secrets:
            - sql_user
            - sql_password
            - sql_database

secrets:
    sql_engine:
        file: ./docker/production/secrets/sql_engine
    sql_user:
        file: ./docker/production/secrets/sql_user
    sql_password:
        file: ./docker/production/secrets/sql_password
    sql_database:
        file: ./docker/production/secrets/sql_database
    sql_host:
        file: ./docker/production/secrets/sql_host
    sql_port:
        file: ./docker/production/secrets/sql_port
    celery_allowed_hosts:
        file: ./docker/production/secrets/celery_allowed_hosts
    celery_broker:
        file: ./docker/production/secrets/celery_broker
    celery_debug:
        file: ./docker/production/secrets/celery_debug
    celery_secret_key:
        file: ./docker/production/secrets/celery_secret_key
    django_allowed_hosts:
        file: ./docker/production/secrets/django_allowed_hosts
    django_debug:
        file: ./docker/production/secrets/django_debug
    django_pubg_api1:
        file: ./docker/production/secrets/django_pubg_api1
    django_pubg_api2:
        file: ./docker/production/secrets/django_pubg_api2
    django_pubg_api3:
        file: ./docker/production/secrets/django_pubg_api3
    django_secret_key:
        file: ./docker/production/secrets/django_secret_key
    email_host:
        file: ./docker/production/secrets/email_host
    email_host_user:
        file: ./docker/production/secrets/email_host_user
    email_port:
        file: ./docker/production/secrets/email_port
    email_use_ssl:
        file: ./docker/production/secrets/email_use_ssl
    flower_password:
        file: ./docker/production/secrets/flower_password
    flower_user:
        file: ./docker/production/secrets/flower_user

volumes:
    traefik-public-certs:

networks:
    traefik-public:
        name: traefik-public
        external: true
